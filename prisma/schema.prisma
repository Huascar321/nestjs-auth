generator client {
  provider = "prisma-client-js"
}

generator shared {
  provider = "prisma-client-js"
  output   = "../../shared-types"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator joi {
  provider = "prisma-joi-generator"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs"
  output                          = "../src/shared/models"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
  decimalAsNumber                 = "false"
  mode                            = "openapi"
  fileConfig                      = "nest-dto.js"
  importPath                      = "@prisma/client"
}

model User {
  id             Int        @id @default(autoincrement())
  username       String     @unique
  password       String
  creationDate   DateTime   @default(now()) @ignore @db.Timestamptz()
  lastUpdateDate DateTime   @updatedAt @ignore @db.Timestamptz()
  userRoles      UserRole[]
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique @db.VarChar(20)
  description    String           @db.VarChar(50)
  creationDate   DateTime         @default(now()) @ignore @db.Timestamptz()
  lastUpdateDate DateTime         @updatedAt @ignore @db.Timestamptz()
  rolePermission RolePermission[]
  userRoles      UserRole[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(20)
  description    String           @db.VarChar(50)
  code           Int              @unique
  creationDate   DateTime         @default(now()) @ignore @db.Timestamptz()
  lastUpdateDate DateTime         @updatedAt @ignore @db.Timestamptz()
  rolePermission RolePermission[]
}

model RolePermission {
  id             Int        @id @default(autoincrement())
  role           Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade)
  roleId         Int
  permission     Permission @relation(fields: [permissionId], references: [id], onUpdate: Cascade)
  permissionId   Int
  creationDate   DateTime   @default(now()) @ignore @db.Timestamptz()
  lastUpdateDate DateTime   @updatedAt @ignore @db.Timestamptz()
}

model UserRole {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id], onUpdate: Cascade)
  userId         Int
  role           Role     @relation(fields: [roleId], references: [id], onUpdate: Cascade)
  roleId         Int
  creationDate   DateTime @default(now()) @ignore @db.Timestamptz()
  lastUpdateDate DateTime @updatedAt @ignore @db.Timestamptz()
}

model Cat {
  id             Int      @id @default(autoincrement())
  name           String
  age            Int
  breed          String
  creationDate   DateTime @default(now()) @ignore @db.Timestamptz()
  lastUpdateDate DateTime @updatedAt @ignore @db.Timestamptz()
}
